# Copyright (c) 2020-2025 Antmicro <www.antmicro.com>
#
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=40.8.0", "wheel", "cython<3.0.0", "numpy>=1.23.5,<2.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "kenning"
version = "0.8.0"
description = "Kenning - a framework for implementing and testing deployment pipelines for deep learning applications on edge devices"
requires-python = ">= 3.10,<3.12"
authors = [
    {name = "Antmicro Ltd.", email = "contact@antmicro.com"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
readme = "README.md"
dependencies = [
    "argcomplete>=3.0",
    "astunparse>=1.6.3",
    "coloredlogs>=0.5",
    "datasets>=4.0.0",
    "importlib_resources>=5.1.4; python_version<'3.9'",
    "isort>=5.12.0",
    "jsonschema>=4.16.0",
    "matplotlib>=3.3.4",
    "numpy>=1.23.5,<2.0.0",
    "onnx<1.15.0",
    "pandoc",
    "Pillow>=8.1.0",
    "psutil>=5.8.0",
    "pyyaml",
    "requests",
    "rich",
    "scikit_learn>=0.24.1",
    "scipy<1.12.0",
    "tomli; python_version<'3.11'",
    "tqdm>=4.60.0",
    "kenning[onnx2tf]",
]

[project.optional-dependencies]
docs = [
    "antmicro-sphinx-utils @ git+https://github.com/antmicro/antmicro-sphinx-utils.git",
    "docutils",
    "sphinxcontrib-napoleon",
    "sphinx>=8.1.3; python_version<='3.11'",
    "sphinx>=8.2.3; python_version>'3.11'",
]
tensorflow = [
    "kenning[onnx2tf]",
    "tf_keras",
    "tensorflow_addons; python_version<'3.12'",
    "tensorflow_model_optimization",
    "tensorflow==2.15.0",
    "h5py",
    "tensorflow_probability>=0.19.0,<0.23.0; python_version>='3.10' and python_version<'3.13'",
]
torch = [
    "onnx2torch",
    "torch>=2.0.1,<=2.3.1",
    "torchvision>=0.15.0",
]
mxnet = [
    "gluoncv>=0.10.2",
    "mxnet",
]
nvidia_perf = [
    "pynvml>=8.0.4",
]
object_detection = [
    "boto3>=1.17.5",
    "botocore>=1.20.5",
    "cython<3.0.0; python_version<'3.12'",
    "cython>=3.0.0; python_version=='3.12'",
    "opencv_python>=4.5.2,<4.8.0",
    "pandas>=1.2.1",
    "pycocotools",
]
speech_to_text = [
    "librosa",
    "pydub",
]
anomaly_detection = [
    "kenning[torch]",
    "pandas",
    "pyod",
]
auto_pytorch = [
    "kenning[torch]",
    "autoPyTorch @ git+https://github.com/antmicro/auto-pytorch.git",
    "ConfigSpace>=1.2.1",
    "smac>=1.2,<2.0.0",
]
tflite = [
    "tflite",
]
tvm = [
    "apache-tvm==0.14.dev273; python_version<'3.12'",
]
iree = [
    "iree-compiler==20230209.425; python_version<'3.12'",
    "iree-runtime==20230209.425; python_version<'3.12'",
    "iree-tools-tf==20230209.425; python_version<'3.12'",
    "iree-tools-tflite==20230209.425; python_version<'3.12'",
    "iree-compiler; python_version=='3.12'",
    "iree-runtime; python_version=='3.12'",
    "iree-tools-tf; python_version=='3.12'",
    "iree-tools-tflite; python_version=='3.12'",
]
onnxruntime = [
    "onnxruntime>=1.12.0",
]
onnxruntime_gpu = [
    "onnxruntime-gpu==1.18.0",
]
test = [
    "filelock",
    "pexpect",
    "pytest",
    "pytest-cov",
    "pytest-dependency",
    "pytest-mock",
    "pytest-order",
    "pytest-reportlog",
    "pytest-xdist",
    "pytest-timeout",
    "tuttest @ git+https://github.com/antmicro/tuttest.git",
    "tf2onnx",
    "kenning[onnx2tf]",
]
real_time_visualization = [
    "dearpygui>=1.6.2",
]
pipeline_manager = [
    "json-rpc==1.15.0",
    "pipeline_manager @ git+https://github.com/antmicro/kenning-pipeline-manager.git",
    "pipeline_manager_backend_communication @ git+https://github.com/antmicro/kenning-pipeline-manager-backend-communication.git",
]
reports = [
    "kenning[docs]",
    "Jinja2>=2.11.2",
    "servis[bokeh,matplotlib] @ git+https://github.com/antmicro/servis.git",
]
uart = [
    "pyserial",
]
renode = [
    "pyrenode3 @ git+https://github.com/antmicro/pyrenode3.git",
    "renode-run @ git+https://github.com/antmicro/renode-run.git",
]
zephyr = [
    "west",
    "dts2repl @ git+https://github.com/antmicro/dts2repl@main#egg=dts2repl",
    "pykwalify",
    "natsort",
    "pyelftools",
    "junitparser>3.1.0",
    "ply",
    "anytree",
]
nni = [
    "kenning[torch]",
    "dill",
    "nni~=2.10.1",
    "tensorboard",
]
ros2 = [
    "rosbags"
]
albumentations = [
    "albumentations",
]

llm = [
    "kenning[torch]",
    "auto_gptq; python_version<'3.12'",
    "autoawq==0.2.5; python_version<'3.12'",
    "rouge-score",
    "transformers==4.40.2",  # version fixed for sparsegpt+gptq optimization
    "vllm==0.5.0; python_version<'3.12'",
]

onnx2tf = [
    "onnx2tf==1.17.5",
    "onnx>=1.14.0,<=1.17.0",
    "onnxruntime==1.18.1",
    "onnx-simplifier==0.4.33",
    "onnx_graphsurgeon",
    "simple_onnx_processing_tools",
    "tensorflow==2.15.0",
    "tf-keras==2.15.0",
    "ai-edge-litert==1.2.0",
    "psutil==5.9.5",
    "ml_dtypes>=0.2.0,<=0.5.1",
    "flatbuffers>=23.1.21",
]

all = [
    "kenning[nvidia_perf,docs,tensorflow,torch,mxnet,object_detection,speech_to_text,anomaly_detection,auto_pytorch,tflite,tvm,iree,onnxruntime,test,real_time_visualization,pipeline_manager,reports,uart,renode,zephyr,nni,ros2,albumentations,llm,onnx2tf]"
]

# pip does not distinguish between kenning.datasets and datasets
# so the local module is excluded from being found
[tool.setuptools.packages.find]
exclude = ["kenning/sparsity_aware_kernel*", "kenning/datasets*"]

[project.scripts]
kenning = "kenning.cli.cli:main"

[project.urls]
homepage = "https://antmicro.github.io/kenning"
repository = "https://github.com/antmicro/kenning"

[tool.pydoclint]
style = "numpy"
allow-init-docstring = true
exclude = 'kenning/tests|kenning/utils/sphinx_html_as_figure.py'
quiet = true
check-return-types = true

[tool.ruff]
preview = true
line-length = 79
select = [
    "I",      # enable isort
    "D",      # docstring errors
    "E",      # PEP8 errors
    "E261",   # At least two spaces before inline comment
    "E225",   # Missing whitespace around operator
    "F",      # PEP8 warnings
    "RUF100", # disallowed unnecessary noqa
]

ignore = [
    "E203",  # Whitespace before ':'
    "D105",  # Missing docstring in magic method
    "D204",  # 1 blank line required after class docstring
    "D205",  # 1 blank line required between summary line and description
    "D200",  # One-line docstring should fit on one line
    "D102",  # Missing docstring in public method
    "D401",  # First line of docstring should be in imperative mood
    "D407",  # Missing argument description in the docstring (handled by pydoclint)
]

[tool.ruff.isort]
extra-standard-library = ["pathlib"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.extend-per-file-ignores]
"setup.py" = ["D100"]
"kenning/tests/*" = ["D100", "D101", "D103"]

[tool.pytest.ini_options]
addopts = "-ra --dist=loadgroup --order-dependencies --color=yes --report-log=log.json -vv"
markers = [
    "slow",          # marks tests as slow (deselect with '-m "not slow"')
    "fast",          # marks tests as fast (deselect with '-m "not fast"')
    "serial",
    "snippets",      # marks tests extracted from Kenning documentation
    "gpu",           # marks tests requiring GPU for running
    "automl",        # marks tests for AutoML flow
    "compat_matrix", # marks tests for creating compatibility matrices
]
log_cli = true
log_level = "DEBUG"
log_format = "[%(asctime)-15s %(filename)s:%(lineno)s] [%(levelname)s] %(message)s"

[tool.coverage.run]
branch = true
omit = [
    "**/__init__.py",
    "**/__main__.py",
    "kenning/tests/*",
    "docs/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Don't complain about pass statements":
    "pass",
    "\\.\\.\\.",
]

ignore_errors = true

[tool.coverage.html]
directory = "docs/source/generated/coverage"

[tool.typos.default.extend-identifiers]
__Pyx_LocalBuf_ND = "__Pyx_LocalBuf_ND"
nd = "nd"
